What happens when you initialize a repository? Why do you need to do it?
	When you initialize a repository, it creates an actual .git file 
	which will eventually start tracking commits (once a person saves some)
	You need to do it because otherwise you have just a regular directory
	which won't have the functionality of Git.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area is different from the working directory in that you
	can pick and choose which files to add to the repository. It is also
	an intermediate Git stage while a WD is not really. I think this is 
	the value, that you can pick and choose. It also allows you to see 
	what you're doing before you commit to a commit.

How can you use the staging area to make sure you have one commit per logical
change?

	You can use the staging area in such a way by using the git diff, which will show the difference between the working directory and the staging area; you can also use git diff --staged to compare the staging area to the most recent commit in the repository.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	A situation where it would be helpful would be when you want to test out a change while keeping the original (master) the same. In this way, you don't have to constantly go back to previous commits to do the testing; you could just switch branches.

How do the diagrams help you visualize the branch structure?

	Using the diagrams, I can tell what happens when a new branch is started, and I can see what is meant by the head of a branch. I am, however, still a little bit foggy about what happens when you make changes to a commit. Like, does it update the following commits, or does it just become the new head? I think it just becomes the new head. But what if you then go back to the most recent commit? Are the changes from the older commit carried forward? I think they are.
	* I was wrong. They are not.
	What I want to know: what if you want to make a small change from a previous commit, but you want to keep a bunch of the changes from that point forward. I guess you could just update the head, couldn't you?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
