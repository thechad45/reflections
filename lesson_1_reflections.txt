How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    Using the diff -u command between the two files, I was easily able to see
    where changes occurred. It turned out the bug was simply a typo for 'space'.
    It was a little confusing because the original file did not even have the 
    word 'space' like I expected.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    Easy access to the entire history of a file cound make me a more efficient
    programmer because I would be able to essentially go back in time if a bug
    were introduced to the program. Thus, I could potentially narrow down the 
    version where the bug was introduced.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Some pros of manually choosing are that you can make sure that they are logical,
    and that they are not too large or too small. Once obvious con to manual 
    choosing is that user error is introduced in that the user could forget to
    create a commit.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Maybe since Git is on your local computer and something like Google Docs is
    stored on a remote server or cloud has something to do with it. Perhaps there 
    aren't as many cases in something like Google Docs where one would want to
    change multiple files.

How can you use the commands git log and git diff to view the history of files?

    Using git log, you can see all of the commits usually with a short description
    (I learned that you might have to use the down arrow in order to see more commits). git diff allows you to see how many changes were made between files, even 
    multiple files that were changed in a commit.

How might using version control make you more confident to make changes that
could break something?

    Well, very simply, it would make me more confident because I can always revert
    back to an unbroken state, using git checkout

Now that you have your workspace set up, what do you want to try using Git for?

    Eventually, I would want to use Git for web develpment purposes. I am intentionally vague about this because I'm still trying to understand the big picture.
