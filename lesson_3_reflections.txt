When would you want to use a remote repository rather than keeping all your work
local?

    A remote repository would allow multiple users to collaborate on a project

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    It might be a good idea to pull changes manually so that you can
    more easily track your own changes. It might be confusing if new
    commits would frequently show up in your local repository.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    A fork is essentially a clone that is on GitHub. A branch is simply 
    a new label in a repository for commits off another branch. You would fork when you want to make a copy of an existing repository on GitHub.
    You would clone when you want a copy of a repository on your local 
    machine. You would branch when you want to make changes to a repository
    without affecting the current branch.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    The benefit of having the last known state of the remote (origin/master) is that you can tell where your local master branch is compared to the remote. You can alse easily tell if you're ahead of the remote or behind, or if you need to merge two out of sync commits.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    Without Git or Github, version control would be quite difficult. It would involve taking turns editing a file, or constantly updating directories so that they are in sync. I guess it might be easier to understand exactly what changes are being made since you would have to communicate with your collaborator so frequently. 

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    It would make sense to make changes in a separate branch when you
    are collaborating and need someone else's input before brashly 
    changing the master or polished, working version. Often, this might
    be an experimental change. A benefit of working directly on the master
    branch might be that it's more straightforward, I guess. It's easier
    to see the step by step process that got you to the most recent commit.
